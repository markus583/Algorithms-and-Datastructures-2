from typing import Generator, Iterator, Union, Any
from copy import deepcopy
from collections import defaultdict

from avl_node import AVLNode


class AVLTree:
    """
    AVL Tree implementation.
    """

    def __init__(self) -> None:
        """Default constructor. Initializes the AVL tree."""
        self.root = None
        self.size = 0

    def get_tree_root(self) -> Union[None, AVLNode]:
        """
        Method to get the root node of the AVLTree
        :return AVLNode -- the root node of the AVL tree
        """
        if self.root:
            return self.root
        return None

    def get_tree_height(self) -> int:
        """Retrieves tree height.
        :return -1 in case of empty tree, current tree height otherwise.
        """
        return self.get_height(self.root)

    def get_tree_size(self) -> int:
        """Yields number of key/value pairs in the tree.
        :return Number of key/value pairs.
        """
        return self.size

    def to_array(self) -> list:
        """Yields an array representation of the tree's values (pre-order).
        :return Array representation of the tree values.
        """
        array = list(self.preorder())
        for i, _ in enumerate(array):  # only return key values, not entire node
            array[i] = array[i].value
        return array

    def update_heights(self, node: AVLNode) -> None:
        """Updates the heights of all nodes in the tree."""
        parent = node.parent
        while parent:
            parent.height = 1 + max(
                self.get_height(parent.left), self.get_height(parent.right)
            )
            parent = parent.parent

    def find_by_key(self, key, _return_node=False) -> Union[Union[int, float], AVLNode]:
        """Returns value of node with given key.
        :param _return_node: whether to return node or key.
        :param key: Key to search.
        :return Corresponding value if key was found, None otherwise.
        :raises ValueError if the key is None
        """
        current = self.root
        while current:
            if key < current.key:
                current = current.left
            elif key > current.key:
                current = current.right
            else:  # equality --> key found
                if _return_node:
                    return current
                return current.key
        return None

    def insert(self, key: Union[int, float], value: Any) -> bool:
        """Inserts a new node into AVL tree.
        :param key: Key of the new node.
        :param value: Data of the new node. May be None. Nodes with the same key
        are not allowed. In this case False is returned. None-Keys and None-Values are
        not allowed. In this case an error is raised.
        :return True if the insert was successful, False otherwise.
        :raises ValueError if the key or value is None.
        """
        if key is None:
            raise ValueError("Key cannot be None.")
        if value is None:
            raise ValueError("Value cannot be None.")

        new = AVLNode(key=key, value=value)  # create new node
        parent = None  # parent of new node
        current = self.root  # current node in the tree
        while current:  # find the right place for the new node
            parent = current  # set parent to current node
            if new.key < current.key:  # go left
                current = current.left
            elif new.key > current.key:  # go right
                current = current.right
            else:  # duplicate key
                return False

        new.parent = parent  # set parent of new node
        if parent is None:  # tree is empty
            self.root = new  # set root to new node
        else:
            if new.key < parent.key:
                parent.left = new
            else:
                parent.right = new

            # fix the tree
            # if parent had 1 child before, the tree is still balanced
            # else, rebalance the tree
            if not (parent.left and parent.right):
                self.cut_link_restructuring(new)
                balance = self.is_balanced(self.root)
                if not balance:
                    raise ValueError("Tree is not balanced.")
        self.size += 1
        return True

    def remove_by_key(self, key: int) -> bool:
        """Removes node with given key.
        :param key: Key of node to remove.
        :return True If node was found and deleted, False otherwise.
        @raises ValueError if the key is None.
        """
        if key is None:
            raise ValueError("Key cannot be None.")

        key_to_remove = self.find_by_key(key=key, _return_node=True)
        # tree consists of only one node
        if key_to_remove and self.size == 1:
            self.root = None
            self.size -= 1
            return True
        if not key_to_remove:
            return False
        parent = key_to_remove.parent
        key_to_remove_height = key_to_remove.height

        balance_node = None
        if self.size != 1:
            if parent.left == key_to_remove:
                balance_node = self.get_rightmost(parent)
            elif parent.right == key_to_remove:
                balance_node = self.get_leftmost(parent)

        restructure = True

        # CASE 1: node has no child node
        if (not key_to_remove.right) and (not key_to_remove.left):
            if key_to_remove.key <= parent.key:
                parent.left = None
            elif key_to_remove.key > parent.key:
                parent.right = None

        # CASE 2: node has only one child; replace it by child node
        # Case 2a: child is on the left to key_to_remove
        elif key_to_remove.left and not key_to_remove.right:
            child = key_to_remove.left
            if key_to_remove.key <= parent.key:
                parent.left = child
            elif key_to_remove.key > parent.key:
                parent.right = child

        # Case 2b: child is on the right to key_to_remove
        elif not key_to_remove.left and key_to_remove.right:
            child = key_to_remove.right
            if key_to_remove.key <= parent.key:
                parent.left = child
            elif key_to_remove.key > parent.key:
                parent.right = child

        # CASE 3: Node has 2 child nodes
        elif key_to_remove.left and key_to_remove.right:
            right_child = key_to_remove.right
            next_successor = self.get_smallest_recursively(
                right_child
            )  # get next in-order successor of key_to_remove
            if (
                next_successor.parent != key_to_remove
            ):  # make sure it is not a child of itself
                self.change_nodes(next_successor, next_successor.right)  # swap them
                next_successor.right = key_to_remove.right  # change links
                next_successor.right.parent = next_successor
            restructure = False

            self.change_nodes(key_to_remove, next_successor)  # swap them
            next_successor.left = key_to_remove.left  # change links
            next_successor.left.parent = next_successor
            next_successor.height = key_to_remove_height

        if parent and balance_node and restructure:
            self.cut_link_restructuring(balance_node)
        self.size -= 1
        return True

    def cut_link_restructuring(self, node: AVLNode) -> None:
        """
        Performs the Cut-Link restructuring algorithm
        :param node: node which is being affected
        :return: None
        """
        parent = node.parent
        y = node
        x = None
        while parent:
            parent.height = 1 + max(
                self.get_height(parent.left), self.get_height(parent.right)
            )
            balance = self._get_balance_factor(parent)
            # 1, -1, -1, -2, 1, -1, 0, 1
            grandparent = parent.parent
            if 1 >= balance >= -1:
                x = y
                y = parent

                parent = parent.parent

            else:
                if x == y.left:
                    is_x_left = True
                else:
                    is_x_left = False
                if y == parent.left:
                    y_left = True
                else:
                    y_left = False

                # INORDER
                # create copies to remove unwanted children for traversal
                parent_tmp = deepcopy(parent)

                if y_left:
                    y_tmp = parent_tmp.left
                else:
                    y_tmp = parent_tmp.right
                if is_x_left:
                    x_tmp = y_tmp.left
                else:
                    x_tmp = y_tmp.right

                parent_child = None  # to avoid errors in a few lines
                y_child = None
                if y_tmp == parent_tmp.right:
                    parent_child = parent_tmp.left
                elif y_tmp == parent_tmp.left:
                    parent_child = parent_tmp.right
                if y_tmp.right == x_tmp:
                    y_child = y_tmp.left
                elif y_tmp.left == x_tmp:
                    y_child = y_tmp.right
                x_left = x_tmp.left
                x_right = x_tmp.right

                # create dictionary that stores node references
                child_dict = defaultdict(dict)  # for double indexing

                # delete child nodes
                if x_left:
                    child_dict["x_left"]["parent"] = x_left
                    child_dict["x_left"]["left"] = x_left.left
                    child_dict["x_left"]["right"] = x_left.right
                    x_left.left = None
                    x_left.right = None
                if x_right:
                    child_dict["x_right"]["parent"] = x_right
                    child_dict["x_right"]["left"] = x_right.left
                    child_dict["x_right"]["right"] = x_right.right
                    x_right.left = None
                    x_right.right = None
                if parent_child:
                    child_dict["parent_child"]["parent"] = parent_child
                    child_dict["parent_child"]["left"] = parent_child.left
                    child_dict["parent_child"]["right"] = parent_child.right
                    parent_child.right = None
                    parent_child.left = None
                if y_child:
                    child_dict["y_child"]["parent"] = y_child
                    child_dict["y_child"]["left"] = y_child.left
                    child_dict["y_child"]["right"] = y_child.right
                    y_child.left = None
                    y_child.right = None

                inorder_list = list(self.inorder(parent_tmp))
                cut_array = inorder_list.copy()

                # insert Nones into array, at proper index
                x_list = [x if x_tmp.key == x.key else None for x in inorder_list]
                x_list = list(filter(None, x_list))[0]
                if not x_left:
                    cut_array.insert(cut_array.index(x_list), None)
                if not x_right:
                    cut_array.insert(cut_array.index(x_list) + 1, None)

                y_list = [x if y_tmp.key == x.key else None for x in inorder_list]
                y_list = list(filter(None, y_list))[0]
                if not y_list.left:
                    cut_array.insert(cut_array.index(y_list), None)
                if not y_list.right:
                    cut_array.insert(cut_array.index(y_list) + 1, None)

                z_list = [x if parent_tmp.key == x.key else None for x in inorder_list]
                z_list = list(filter(None, z_list))[0]
                if not z_list.left:
                    cut_array.insert(0, None)
                if not z_list.right:
                    cut_array.insert(6, None)

                # re-insert child nodes
                for value in child_dict.values():
                    if value["left"]:
                        value_in_list = [
                            x if value["parent"].key == x.key else None
                            for x in inorder_list
                        ]
                        value_in_list = list(filter(None, value_in_list))[0]
                        value_in_list.left = value["left"]
                        value_in_list.right = value["right"]
                    if value["right"]:
                        value_in_list = [
                            x if value["parent"].key == x.key else None
                            for x in inorder_list
                        ]
                        value_in_list = list(filter(None, value_in_list))[0]
                        value_in_list.left = value["left"]
                        value_in_list.right = value["right"]

                # re-insert parent node
                if parent == self.root:
                    parent = cut_array[3]
                    current_root = parent
                    self.root = current_root
                    current_root.parent = None
                elif grandparent.left == parent:
                    parent = cut_array[3]
                    grandparent.left = parent
                    current_root = parent
                    current_root.parent = grandparent
                elif grandparent.right == parent:
                    parent = cut_array[3]
                    grandparent.right = parent
                    current_root = parent
                    current_root.parent = grandparent
                else:
                    raise Exception("Parent not found")

                current_root.left = cut_array[1]
                current_root.right = cut_array[5]
                current_root.left.parent = current_root
                current_root.right.parent = current_root
                # current_root.left.height, current_root.right.height = (
                #     new_height - 1,
                #     new_height - 1,
                # )
                current_root.left.height = 1 + max(
                    self.get_height(cut_array[0]),
                    self.get_height(cut_array[2]),
                )
                current_root.right.height = 1 + max(
                    self.get_height(cut_array[4]),
                    self.get_height(cut_array[6]),
                )
                current_root.height = 1 + max(
                    self.get_height(current_root.right),
                    self.get_height(current_root.left),
                )
                current_root.left.left = cut_array[0]
                current_root.left.right = cut_array[2]

                try:
                    current_root.left.right.parent = current_root.left
                except AttributeError:
                    pass
                try:
                    current_root.left.left.parent = current_root.left
                except AttributeError:
                    pass

                current_root.right.left = cut_array[4]
                current_root.right.right = cut_array[6]
                try:
                    current_root.right.right.parent = current_root.right
                except AttributeError:
                    pass
                try:
                    current_root.right.left.parent = current_root.right
                except AttributeError:
                    pass

                node = self.find_by_key(node.key, _return_node=True)  # still O(log n)
                parent = node.parent
                y = node
                x = None

    def change_nodes(self, deleting_node: AVLNode, replacing_node: AVLNode) -> None:
        """
        Helper function for remove. node_1 is changing places with node_2.
        :return: None
        """
        if deleting_node.parent is None:  # node_1 is root
            self.root = replacing_node
        elif deleting_node == deleting_node.parent.left:  # node_1 is left child
            deleting_node.parent.left = replacing_node
        else:  # node_1 is right child
            deleting_node.parent.right = replacing_node
        if replacing_node is not None:  # change parent relationship
            replacing_node.parent = deleting_node.parent

    @staticmethod
    def get_leftmost(node) -> AVLNode:
        """
        :param node: node of subtree we are in
        :return: leftmost node
        """
        current = node
        while current.left:
            current = current.left  # go left
        return current

    @staticmethod
    def get_rightmost(node) -> AVLNode:
        """
        :param node: node of subtree we are in
        :return: leftmost node
        """
        current = node
        while current.right:
            current = current.right  # go right
        return current

    @staticmethod
    def get_smallest_recursively(node):
        """
        Helper function to get the smallest key in the tree, starting from a specific node (here: node).
        :param node:
        :return:
        """
        current_node = node
        # Go left as long as left child is not None
        while current_node.left is not None:
            current_node = current_node.left
        return current_node  # and return last node where child is not None

    @staticmethod
    def get_height(node) -> int:
        """
        Gets height of node.
        :param node: node in AVLTree
        :return: height of node
        """
        if node:
            return node.height
        # None has height -1
        return -1

    def _get_balance_factor(self, node) -> int:
        """
        Gets balance factor of node.
        :param node: node in AVLTree
        :return: balance factor of node
        """
        if node:
            return self.get_height(node.left) - self.get_height(node.right)
        # Empty node's height is -1
        return -1

    def is_balanced(self, node: AVLNode) -> bool:
        """
        Checks if node is balanced.
        :param node: AVLNode
        :return: whether node is balanced
        """
        # Base condition
        if node is None:
            return True

        # for left and right subtree height
        left_height = self.get_height(self.root.left)
        right_height = self.get_height(self.root.right)

        # allowed values for (lh - rh) are 1, -1, 0
        if (
            (abs(left_height - right_height) <= 1)
            and self.is_balanced(node.left) is True
            and self.is_balanced(node.right) is True
        ):
            return True

        # if we reach here means tree is not
        # height-balanced tree
        return False

    def inorder(
        self, node: AVLNode = None
    ) -> Union[Iterator, Generator[Any, Any, None]]:
        """Yield nodes in inorder."""
        node = node or self.root

        # left, root, right
        def inorder_recursively(current_node) -> Iterator:
            if current_node:
                yield from inorder_recursively(current_node.left)
                yield current_node
                yield from inorder_recursively(current_node.right)

        # This is needed in the case that there are no nodes.
        if not node:
            return iter(())
        return inorder_recursively(node)

    def preorder(
        self, node: AVLNode = None
    ) -> Union[Iterator, Generator[Any, Any, None]]:
        """Yield nodes in preorder."""
        node = node or self.root

        # root, left, right
        def preorder_recursively(current_node) -> Iterator:
            if current_node:
                yield current_node
                yield from preorder_recursively(current_node.left)
                yield from preorder_recursively(current_node.right)

        if not node:
            return iter(())
        return preorder_recursively(node)

    def postorder(
        self, node: AVLNode = None
    ) -> Union[Iterator, Generator[Any, Any, None]]:
        """Yield nodes in postorder."""
        node = node or self.root

        # left, right, root
        def postorder_recursively(current_node) -> Iterator:
            if current_node:
                yield from postorder_recursively(current_node.left)
                yield from postorder_recursively(current_node.right)
                yield current_node

        if not node:
            return iter(())
        return postorder_recursively(node)

    def print_tree(self, node: AVLNode, level: int = 0) -> None:
        """
        Prints the tree.
        :param node: starting node
        :param level: level/depth of node
        :return: None
        """
        if node is not None:
            self.print_tree(node.right, level + 1)
            print(" " * 4 * level + "->", node.key)
            self.print_tree(node.left, level + 1)


if __name__ == "__main__":
    tree = AVLTree()

    tree.insert(44, 0)
    tree.insert(17, 1)
    tree.insert(78, 2)
    tree.insert(32, 3)
    tree.insert(50, 4)
    tree.insert(88, 5)
    tree.insert(48, 6)
    tree.insert(62, 7)
    tree.insert(54, 8)
    print(tree.to_array())

    tree.insert(20, 0)
    tree.insert(13, 1)
    tree.insert(24, 4)
    tree.insert(5, 2)
    tree.insert(17, 3)
    tree.insert(22, 5)
    tree.insert(26, 6)
    tree.insert(21, 7)
    tree.insert(25, 8)
    print(tree.to_array())
    # [0, 0, 1, 2, 1, 4, 5, 7, 6, 8, 3, 7, 4, 6, 8, 2, 5]
    tree.insert(28, 9)
    tree.insert(30, 10)
    tree.insert(100, 11)
    print(tree.to_array())

    tree.insert(5, 0)
    tree.insert(18, 1)
    tree.insert(2, 2)
    tree.insert(8, 3)
    tree.insert(14, 4)
    print(tree.to_array())
